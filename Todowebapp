<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaskMaster - To-Do Web App</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .task-input {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .input-group {
            display: grid;
            grid-template-columns: 1fr auto;
            gap: 15px;
            margin-bottom: 15px;
        }

        .task-input input[type="text"] {
            padding: 15px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .task-input input[type="text"]:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 15px 25px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a6fd8;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #6c757d;
            border: 1px solid #dee2e6;
        }

        .btn-secondary:hover {
            background: #e9ecef;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-warning {
            background: #ffc107;
            color: #212529;
        }

        .btn-warning:hover {
            background: #e0a800;
        }

        .datetime-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr auto;
            gap: 15px;
            align-items: center;
        }

        .datetime-inputs input {
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 0.9rem;
        }

        .datetime-inputs input:focus {
            outline: none;
            border-color: #667eea;
        }

        .filters {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

        .filter-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #e1e5e9;
            background: white;
            border-radius: 25px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .filter-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .filter-btn:hover {
            border-color: #667eea;
        }

        .tasks-container {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .tasks-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f3f4;
        }

        .task-stats {
            font-weight: 600;
            color: #667eea;
        }

        .task-item {
            background: #f8f9ff;
            border: 2px solid #e8ecf7;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            position: relative;
        }

        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.15);
        }

        .task-item.completed {
            background: #f0fff4;
            border-color: #c3e6cb;
            opacity: 0.8;
        }

        .task-item.completed .task-text {
            text-decoration: line-through;
            color: #6c757d;
        }

        .task-item.overdue {
            background: #fff5f5;
            border-color: #fecaca;
        }

        .task-content {
            display: flex;
            align-items: flex-start;
            gap: 15px;
        }

        .task-checkbox {
            width: 20px;
            height: 20px;
            margin-top: 2px;
            cursor: pointer;
        }

        .task-details {
            flex: 1;
        }

        .task-text {
            font-size: 1.1rem;
            font-weight: 500;
            margin-bottom: 8px;
            line-height: 1.4;
        }

        .task-meta {
            display: flex;
            gap: 15px;
            font-size: 0.85rem;
            color: #6c757d;
            margin-bottom: 10px;
        }

        .task-meta span {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .task-actions {
            display: flex;
            gap: 8px;
        }

        .task-actions .btn {
            padding: 6px 12px;
            font-size: 0.85rem;
        }

        .priority-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .priority-high {
            background: #fee;
            color: #dc3545;
        }

        .priority-medium {
            background: #fff3cd;
            color: #856404;
        }

        .priority-low {
            background: #d1ecf1;
            color: #0c5460;
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #6c757d;
        }

        .empty-state h3 {
            font-size: 1.5rem;
            margin-bottom: 10px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 15px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            margin-bottom: 20px;
        }

        .modal-header h3 {
            font-size: 1.5rem;
            margin-bottom: 10px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 1rem;
        }

        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .modal-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #28a745;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            transform: translateX(400px);
            transition: transform 0.3s ease;
            z-index: 2000;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.error {
            background: #dc3545;
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }

            .header h1 {
                font-size: 2.5rem;
            }

            .input-group {
                grid-template-columns: 1fr;
            }

            .datetime-inputs {
                grid-template-columns: 1fr;
            }

            .filter-buttons {
                justify-content: center;
            }

            .task-content {
                flex-direction: column;
                gap: 10px;
            }

            .task-actions {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>📝 TaskMaster</h1>
            <p>Organize your life, one task at a time</p>
        </div>

        <!-- Task Input -->
        <div class="task-input">
            <div class="input-group">
                <input type="text" id="taskInput" placeholder="What needs to be done?" maxlength="200">
                <button class="btn btn-primary" onclick="addTask()">
                    ➕ Add Task
                </button>
            </div>
            <div class="datetime-inputs">
                <input type="date" id="taskDate" title="Due Date">
                <input type="time" id="taskTime" title="Due Time">
                <select id="taskPriority" title="Priority">
                    <option value="low">Low Priority</option>
                    <option value="medium" selected>Medium Priority</option>
                    <option value="high">High Priority</option>
                </select>
            </div>
        </div>

        <!-- Filters -->
        <div class="filters">
            <div class="filter-buttons">
                <button class="filter-btn active" onclick="filterTasks('all')">All Tasks</button>
                <button class="filter-btn" onclick="filterTasks('pending')">Pending</button>
                <button class="filter-btn" onclick="filterTasks('completed')">Completed</button>
                <button class="filter-btn" onclick="filterTasks('today')">Due Today</button>
                <button class="filter-btn" onclick="filterTasks('overdue')">Overdue</button>
                <button class="filter-btn" onclick="filterTasks('high')">High Priority</button>
            </div>
        </div>

        <!-- Tasks Container -->
        <div class="tasks-container">
            <div class="tasks-header">
                <h2>Your Tasks</h2>
                <div class="task-stats">
                    <span id="taskStats">0 tasks</span>
                </div>
            </div>
            <div id="tasksList">
                <div class="empty-state">
                    <h3>🎯 No tasks yet!</h3>
                    <p>Add your first task above to get started on your productivity journey.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Task Modal -->
    <div class="modal" id="editModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Edit Task</h3>
            </div>
            <form id="editForm">
                <div class="form-group">
                    <label for="editTaskText">Task Description</label>
                    <textarea id="editTaskText" placeholder="Enter task description..."></textarea>
                </div>
                <div class="form-group">
                    <label for="editTaskDate">Due Date</label>
                    <input type="date" id="editTaskDate">
                </div>
                <div class="form-group">
                    <label for="editTaskTime">Due Time</label>
                    <input type="time" id="editTaskTime">
                </div>
                <div class="form-group">
                    <label for="editTaskPriority">Priority</label>
                    <select id="editTaskPriority">
                        <option value="low">Low Priority</option>
                        <option value="medium">Medium Priority</option>
                        <option value="high">High Priority</option>
                    </select>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeEditModal()">Cancel</button>
                    <button type="submit" class="btn btn-success">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast" id="toast"></div>

    <script>
        // Global variables
        let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
        let currentFilter = 'all';
        let editingTaskId = null;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            renderTasks();
            updateStats();
            
            // Set today's date as default
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('taskDate').value = today;
            
            // Add enter key listener for task input
            document.getElementById('taskInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    addTask();
                }
            });
            
            // Handle edit form submission
            document.getElementById('editForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveEditedTask();
            });
        });

        // Add new task
        function addTask() {
            const taskInput = document.getElementById('taskInput');
            const taskDate = document.getElementById('taskDate');
            const taskTime = document.getElementById('taskTime');
            const taskPriority = document.getElementById('taskPriority');
            
            if (taskInput.value.trim() === '') {
                showToast('Please enter a task description!', 'error');
                taskInput.focus();
                return;
            }
            
            const task = {
                id: Date.now(),
                text: taskInput.value.trim(),
                completed: false,
                createdAt: new Date().toISOString(),
                dueDate: taskDate.value,
                dueTime: taskTime.value,
                priority: taskPriority.value
            };
            
            tasks.unshift(task);
            saveTasks();
            renderTasks();
            updateStats();
            
            // Clear inputs
            taskInput.value = '';
            taskTime.value = '';
            taskPriority.value = 'medium';
            
            showToast('Task added successfully! 🎉', 'success');
            taskInput.focus();
        }

        // Toggle task completion
        function toggleTask(id) {
            const task = tasks.find(t => t.id === id);
            if (task) {
                task.completed = !task.completed;
                task.completedAt = task.completed ? new Date().toISOString() : null;
                saveTasks();
                renderTasks();
                updateStats();
                
                const message = task.completed ? 'Task completed! 🎉' : 'Task marked as pending';
                showToast(message, 'success');
            }
        }

        // Delete task
        function deleteTask(id) {
            if (confirm('Are you sure you want to delete this task?')) {
                tasks = tasks.filter(t => t.id !== id);
                saveTasks();
                renderTasks();
                updateStats();
                showToast('Task deleted successfully', 'success');
            }
        }

        // Edit task
        function editTask(id) {
            const task = tasks.find(t => t.id === id);
            if (task) {
                editingTaskId = id;
                document.getElementById('editTaskText').value = task.text;
                document.getElementById('editTaskDate').value = task.dueDate || '';
                document.getElementById('editTaskTime').value = task.dueTime || '';
                document.getElementById('editTaskPriority').value = task.priority;
                document.getElementById('editModal').classList.add('active');
            }
        }

        // Save edited task
        function saveEditedTask() {
            const task = tasks.find(t => t.id === editingTaskId);
            if (task) {
                task.text = document.getElementById('editTaskText').value.trim();
                task.dueDate = document.getElementById('editTaskDate').value;
                task.dueTime = document.getElementById('editTaskTime').value;
                task.priority = document.getElementById('editTaskPriority').value;
                
                saveTasks();
                renderTasks();
                updateStats();
                closeEditModal();
                showToast('Task updated successfully! ✨', 'success');
            }
        }

        // Close edit modal
        function closeEditModal() {
            document.getElementById('editModal').classList.remove('active');
            editingTaskId = null;
        }

        // Filter tasks
        function filterTasks(filter) {
            currentFilter = filter;
            
            // Update filter buttons
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            renderTasks();
        }

        // Get filtered tasks
        function getFilteredTasks() {
            const now = new Date();
            const today = now.toISOString().split('T')[0];
            
            switch (currentFilter) {
                case 'completed':
                    return tasks.filter(task => task.completed);
                case 'pending':
                    return tasks.filter(task => !task.completed);
                case 'today':
                    return tasks.filter(task => task.dueDate === today);
                case 'overdue':
                    return tasks.filter(task => {
                        if (!task.dueDate || task.completed) return false;
                        const dueDateTime = new Date(task.dueDate + (task.dueTime ? 'T' + task.dueTime : ''));
                        return dueDateTime < now;
                    });
                case 'high':
                    return tasks.filter(task => task.priority === 'high');
                default:
                    return tasks;
            }
        }

        // Check if task is overdue
        function isTaskOverdue(task) {
            if (!task.dueDate || task.completed) return false;
            const now = new Date();
            const dueDateTime = new Date(task.dueDate + (task.dueTime ? 'T' + task.dueTime : ''));
            return dueDateTime < now;
        }

        // Format date for display
        function formatDate(dateString) {
            if (!dateString) return '';
            const date = new Date(dateString);
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(today.getDate() + 1);
            
            if (dateString === today.toISOString().split('T')[0]) {
                return 'Today';
            } else if (dateString === tomorrow.toISOString().split('T')[0]) {
                return 'Tomorrow';
            } else {
                return date.toLocaleDateString('en-US', { 
                    month: 'short', 
                    day: 'numeric',
                    year: date.getFullYear() !== today.getFullYear() ? 'numeric' : undefined
                });
            }
        }

        // Format time for display
        function formatTime(timeString) {
            if (!timeString) return '';
            const [hours, minutes] = timeString.split(':');
            const time = new Date();
            time.setHours(hours, minutes);
            return time.toLocaleTimeString('en-US', { 
                hour: 'numeric', 
                minute: '2-digit',
                hour12: true 
            });
        }

        // Render tasks
        function renderTasks() {
            const tasksList = document.getElementById('tasksList');
            const filteredTasks = getFilteredTasks();
            
            if (filteredTasks.length === 0) {
                const emptyMessages = {
                    all: { title: '🎯 No tasks yet!', subtitle: 'Add your first task above to get started.' },
                    completed: { title: '✅ No completed tasks', subtitle: 'Complete some tasks to see them here.' },
                    pending: { title: '📋 No pending tasks', subtitle: 'Great job! All tasks are completed.' },
                    today: { title: '📅 No tasks due today', subtitle: 'Your schedule is clear for today.' },
                    overdue: { title: '⏰ No overdue tasks', subtitle: 'Great! You\'re on top of your schedule.' },
                    high: { title: '🔥 No high priority tasks', subtitle: 'No urgent tasks at the moment.' }
                };
                
                const message = emptyMessages[currentFilter] || emptyMessages.all;
                tasksList.innerHTML = `
                    <div class="empty-state">
                        <h3>${message.title}</h3>
                        <p>${message.subtitle}</p>
                    </div>
                `;
                return;
            }
            
            tasksList.innerHTML = filteredTasks.map(task => {
                const overdue = isTaskOverdue(task);
                const dueDate = formatDate(task.dueDate);
                const dueTime = formatTime(task.dueTime);
                
                return `
                    <div class="task-item ${task.completed ? 'completed' : ''} ${overdue ? 'overdue' : ''}">
                        <div class="task-content">
                            <input type="checkbox" class="task-checkbox" 
                                   ${task.completed ? 'checked' : ''} 
                                   onchange="toggleTask(${task.id})">
                            <div class="task-details">
                                <div class="task-text">${task.text}</div>
                                <div class="task-meta">
                                    ${dueDate ? `<span>📅 ${dueDate}</span>` : ''}
                                    ${dueTime ? `<span>⏰ ${dueTime}</span>` : ''}
                                    <span class="priority-badge priority-${task.priority}">
                                        ${task.priority} priority
                                    </span>
                                    ${overdue ? '<span style="color: #dc3545;">⚠️ Overdue</span>' : ''}
                                </div>
                                <div class="task-actions">
                                    <button class="btn btn-warning" onclick="editTask(${task.id})">
                                        ✏️ Edit
                                    </button>
                                    <button class="btn btn-danger" onclick="deleteTask(${task.id})">
                                        🗑️ Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Update statistics
        function updateStats() {
            const totalTasks = tasks.length;
            const completedTasks = tasks.filter(t => t.completed).length;
            const pendingTasks = totalTasks - completedTasks;
            
            document.getElementById('taskStats').textContent = 
                `${totalTasks} total • ${pendingTasks} pending • ${completedTasks} completed`;
        }

        // Save tasks to localStorage
        function saveTasks() {
            localStorage.setItem('tasks', JSON.stringify(tasks));
        }

        // Show toast notification
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast ${type}`;
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Close modal when clicking outside
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal')) {
                closeEditModal();
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeEditModal();
            }
        });
    </script>
</body>
</html>
